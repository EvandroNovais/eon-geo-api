version: '3.8'

services:
  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: eon-geo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eon-geo-network

  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eon-geo-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
      - REDIS_TTL=86400
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
      - LOG_FILE=logs/app.log
    volumes:
      - api_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - eon-geo-network

volumes:
  redis_data:
    driver: local
  api_logs:
    driver: local

networks:
  eon-geo-network:
    driver: bridge